Document NESTJS
 + SRC: nơi chứa mã nguồn code 
 + Test: Nơi Kiểm tra đầu đuôi
 
	+ Module là gì: Là một 1 class được chú thích bằng decoratar @Module().Decoratra này cung cấp siêu dữ liệu mà Nest sử dụng
	để tổ chức và quản lý cấu trúc ứng dụng một cách hiệu quản
		
		Vd: Application Module 
		+ User Module , Orders Module, Chat Module sẽ gọi lên Application Module
		+ feature Module1,feature Module2, feature Module3 sẽ gọi lên Orders Module,Chat Module
		
		Mỗi ứng dụng Nest có ít nhất 1 module,module gốc đóng vai trò quan trọng là điểm khởi đầu để xây dựng đồ thị ứng dụng.Đồ thị này là một cấu trúc
		nội bộ mà Nest sử dụng để giải quyết các mối quan hệ và phụ thuộc giữa các module và providers.Trong khi các ứng dụng nhỏ chỉ có thể sử dụng 1 module gốc
		điều này thường không phải là trường hợp. Các module đc sử dụng mạnh mẽ để tổ chức các thành phần trong dự án.Đối với các ứng dụng,có thể rất nhiều
		module, mỗi module đóng gói một tập hợp các khả năng có liên quan chặt chẽ.
	
	 Decoratra @Module() lấy một đối tượng duy nhất với các thuộc tính mô tả mô-đun:
	 
		+ providers: các nhà cung cấp sẽ được khởi tạo bởi bộ tiêm Nest và có thể được chia sẻ ít nhất trên toàn bộ mô-đun này
		+ controllers: điều khiển xác định các bộ mô-đun này được khỏi tạo 
		+ import: Danh sách các mô-đun đã nhập xuất các nhà cung cấp được yêu cầu trong mô-đun này
		+ exports: tập hợp con các providers được cung cấp bởi mô-đun này và sẽ có sẵn trong các mô-đun khác nhập mô-đun này. 
		Bạn có thể sử dụng chính nhà cung cấp hoặc chỉ sử dụng mã thông báo của nó (providers giá trị)
		
		Mô-đun đóng gói các providers theo mặc định, 
		nghĩa là bạn chỉ có thể chèn các nhà cung cấp là một phần của mô-đun hiện tại hoặc được xuất rõ ràng từ các mô-đun đã nhập khác. 
		Các nhà cung cấp được xuất từ một mô-đun về cơ bản đóng vai trò là giao diện công khai hoặc API của mô-đun.
		
	FEATURE MODULES
	Trong ví dụ của chúng tôi, CatsController và CatsService có liên quan chặt chẽ và phục vụ cùng một miền ứng dụng.
	Bạn nên nhóm chúng thành một mô-đun tính năng. Mô-đun tính năng tổ chức mã có liên quan đến một tính năng cụ thể,
	giúp duy trì ranh giới rõ ràng và tổ chức tốt hơn. Điều này đặc biệt quan trọng khi ứng dụng hoặc nhóm phát triển và nó phù hợp với các nguyên tắc SOLID. 
	Tiếp theo, chúng ta sẽ tạo CatsModule để minh họa cách nhóm bộ điều khiển và dịch vụ.
			vd:
	
				import { Module } from '@nestjs/common';
				import { CatsController } from './cats.controller';
				import { CatsService } from './cats.service';

				@Module({
				  controllers: [CatsController],
				  providers: [CatsService],
				})
				export class CatsModule {}
				
				 => Khi chạy lên NEST JS sẽ tạo ra DIST chúng ta không cần lo lắng về chúng
				 Lưu Ý lệnh chạy cho NEST CLI tạo nhanh module: 
				 vd Nest g module user
 

	+ Controller: Bộ điều khiển chịu trách nhiệm xử lý các yêu cầu đến và gửi phản hồi trở lại mấy Client (Có thể return về Obj)
	
	Client Side -----Http Resquest---> Controller1, Controller2,Controller3
	
	
	+ Proviers: Là khái niệm cốt lỗi trong Nestjs. Nhiều lớp cơ bản của Nestjs, chẳng hạn như Services,Repositories,factories và,heplers,có thể
	được coi như là Proviers. Ý tưởng chính đằng sau một providers là nó có thể đc tiêm như 1 dependency, cho phép các đối tượng tạo ra nhiều mốt 
	quan hệ khác nhau với nhau. Trách nhiệm "Kết nói" các đối tượng này phần lớn được xử lí Runtime của Nestjs
	
	
	
	+ Syntax (@Injectable)
	Trong NestJS, @Injectable() là decorator dùng để đánh dấu một class là có thể được "inject" (tiêm phụ thuộc) 
	vào nơi khác thông qua Dependency Injection (DI) — một trong những nền tảng cốt lõi của NestJS.
	 Vd @Injectable()
		export class UserService {
		  // ...
		}
		Bạn đang nói với NestJS rằng:
		"Class này có thể được tiêm (inject) vào các nơi khác như controller, service khác..."
					@Controller('user')
					export class UserController {
					constructor(private readonly userService: UserService) {}

					@Get()
					getUsers() {
						return this.userService.findAll();
					}
				}
		Dependency Injection (DI) là một kỹ thuật trong lập trình dùng để tách sự phụ thuộc giữa các đối tượng,
		giúp cho mã nguồn dễ bảo trì, kiểm thử và mở rộng hơn.



		Giới thiệu về ORM 
		+ ORM (Object-Relational Mapping) là một kỹ thuật lập trình cho phép ánh xạ (mapping) giữa các đối tượng trong lập trình hướng đối tượng
		(như các class trong JavaScript, TypeScript, Java, v.v.)
		và các bảng trong cơ sở dữ liệu quan hệ (như PostgreSQL, MySQL). 
		Nó giúp các nhà phát triển làm việc với cơ sở dữ liệu bằng cách sử dụng các đối tượng thay vì viết truy vấn SQL trực tiếp.


        Giới Thiệu về Prisma :
		Tổng quan về Prisma Schema:
			File schema.prisma là trung tâm của Prisma, nơi bạn:
			Định nghĩa các mô hình dữ liệu (models) tương ứng với các bảng trong cơ sở dữ liệu.
			Cấu hình nguồn dữ liệu (datasource) để kết nối với cơ sở dữ liệu.
			Cấu hình generator để tạo Prisma Client hoặc các artifact khác.
			
		@Gobal Trong NestJS, @Global()  là một decorator dùng để đánh dấu một module là toàn cục (global)
		— tức là các provider bên trong module đó có thể được sử dụng ở bất kỳ nơi nào trong ứng dụng mà không cần phải import module đó lại nhiều lần.
		
		@Req 
		singup(@Req() req: Request)	
		Tạo một handler function cho route. Dùng @Req() để lấy toàn bộ request gốc từ Express (nên tránh dùng nếu không cần toàn request).
		
		
		+ Pipes 
		Một pipe là một class được chú thích bằng decorator @Injectable(),thực hiện giao diện PipeTransfrom
		Công dụng 
		1. Validation(kiểm tra đầu vào)
		vd ktr email có đúng định dạng không , password có đội dài không 
		2. Transformation(chuyển đổi dữ liệu )
		vd chuyển  chuỗi "1,2,3" thành 1,2,3
		
	     app.useGlobalPipes(new ValidationPipe());
		 +là phương thức của NestFactory dùng để đăng ký các pipes cho toàn bộ ứng dụng.
		 new ValidationPipe() là ValidationPipe được tạo mới. ValidationPipe là pipe tích hợp sẵn của NestJS, 
		 giúp bạn kiểm tra dữ liệu đầu vào có hợp lệ hay không dựa vào các decorator của class-validator (như @IsString(), @IsEmail(), v.v.).
		 
		 
	+ Giới thiệu về argon2 
	Argon2 là một thuật toán băm mật khẩu (password hashing algorithm) hiện đại và rất an toàn, được thiết kế đặc biệt để:

		Khó bị tấn công bằng brute-force (thử mật khẩu liên tục).

		Khó bị tấn công bằng phần cứng mạnh như GPU hoặc ASIC.

		Có thể điều chỉnh được mức độ ngốn CPU, RAM và thời gian, khiến việc crack mật khẩu tốn kém hơn nhiều.

